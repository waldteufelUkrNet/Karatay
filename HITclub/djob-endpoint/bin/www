#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('djob:server');
var http = require('http');
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var socketService = require('../utils/socket.js');
var sticky= require('sticky-session');
let redis = require("redis");
 const cluster = require('cluster');
const numCPUs = require('os').cpus().length;
var workers ={};
var semi_workers ={};
socket_channels={a:"123"};
request_channels={} ;



/*
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
*/

 if (cluster.isMaster) {
   console.log(`Master ${process.pid} is running`);

//request_channels = {};
   for (let i = 0; i < numCPUs; i++) {
     var worker = cluster.fork();
     workers[''+worker.id] = worker;
     semi_workers[''+worker.id] = {};
      console.log(`worker ${worker.id} run`);
   }

   cluster.on('message', (worker, msg, handle) => {
     console.log(semi_workers)
     if(msg.pid)
       workers[msg.pid+""].send({
         topic: msg.topic,
         value: msg.value
       });

  });


   cluster.on('exit', (worker, code, signal) => {
     console.log(`worker ${worker.process.pid} died`);
   });
 } else {


   var server = http.createServer(app);
   server.listen(port);
   server.on('error', onError);
   server.on('listening', onListening);
   server.timeout=360000;
   socket_io = socketService.initChat(server);

     console.log(`Worker  started on ${process.pid}`);
 }




 function normalizePort(val) {
   var port = parseInt(val, 10);

   if (isNaN(port)) {
     // named pipe
     return val;
   }

   if (port >= 0) {
     // port number
     return port;
   }

   return false;
 }

 /**
  * Event listener for HTTP server "error" event.
  */

 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }

   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;

   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }

 /**
  * Event listener for HTTP server "listening" event.
  */

 function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }
